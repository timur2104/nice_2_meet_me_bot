import io

from create_bot import dp, bot, API_key, MY_TG_ID
from keyboards import main_keyboard, photo_keyboard, story_keyboard, nextstep_keyboard
from states import AllStates
from speech_to_text_API import speech_to_text_pipeline
from answering_model import query

from aiogram import executor, types
from aiogram.dispatcher import FSMContext


async def start_handler(message: types.Message):
    """
    Handler for /start command, restarting the bot and returning it to default state
    """
    # Deleting command message
    await bot.delete_message(message_id=message.message_id,
                             chat_id=message.from_user.id)

    # Setting state to main_menu, to use this command as bot restart from any state
    await AllStates.main_menu.set()

    # Sending hello message with bot interface and functionality info
    await bot.send_message(text='–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç —Ç–µ–±—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ kids ai.\n '
                                '\t1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ '
                                ', —Å –∏—Ö –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å, —É–∑–Ω–∞—Ç—å –æ —Ö–æ–±–±–∏ –∏–ª–∏ –¥–∞–∂–µ –ø–æ—Å–ª—É—à–∞—Ç—å —Ä–∞—Å—Å–∫–∞–∑—ã –Ω–∞ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏ –Ω–µ –æ—á–µ–Ω—å —Ç–µ–º—ã '
                                '–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–æ—Ç–∞\n '
                                '\t2. –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–±–µ, '
                                '–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤ –º–µ–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–∑–≤–∞–ª—è–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã, ',
                           chat_id=message.from_user.id,
                           reply_markup=main_keyboard,
                           parse_mode='HTML')


async def handle_source(message: types.Message):
    """
    Handler sending link to Github repository containing source code of the project.
    """
    await bot.delete_message(message_id=message.message_id,
                             chat_id=message.from_user.id)

    await bot.send_message(text='[–°—Å—ã–ª–∫–∞](https://github.com/) –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º',
                           chat_id=message.from_user.id,
                           parse_mode='Markdown')


async def handle_nextstep(message: types.Message):
    """
    Handler for command that will notify candidate about his next step
    """

    await bot.delete_message(message_id=message.message_id,
                             chat_id=message.from_user.id)

    await AllStates.wait_message.set()

    await bot.send_message(text='–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç',
                           chat_id=message.from_user.id,
                           parse_mode='HTML',
                           reply_markup=nextstep_keyboard)


async def send_nextstep(message: types.Message):
    """
    Handler copying message sent to bot to direct it to developer
    """

    try:
        await bot.copy_message(chat_id=MY_TG_ID,
                               from_chat_id=message.from_user.id,
                               message_id=message.message_id)
    except:
        await bot.send_message(text='–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                               chat_id=message.from_user.id,
                               parse_mode='HTML',
                               reply_markup=nextstep_keyboard)
    else:
        await bot.send_message(text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.',
                               chat_id=message.from_user.id,
                               parse_mode='HTML',
                               reply_markup=nextstep_keyboard)
    await back_to_main(message)


async def photo_request_handler(message: types.Message):
    """
    Handler moving user to photo menu followed with info about this section functionality
    """
    await AllStates.photo_menu.set()

    # await bot.delete_message(message_id=message.message_id,
    #                          chat_id=message.from_user.id)

    await bot.send_message(text='–ö–æ–Ω–µ—á–Ω–æ, –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞–¥–æ –∑–Ω–∞—Ç—å –≤ –ª–∏—Ü–æ. \n'
                                '–û–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –¥–≤–∞ —Ñ–æ—Ç–æ, –∫–∞–∫–æ–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å - –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π',
                           chat_id=message.from_user.id,
                           reply_markup=photo_keyboard,
                           parse_mode='HTML')


async def send_photo(message: types.Message):
    """
     Handler sending photo requested by user in photo menu
    """
    if message.text == '–°–≤–µ–∂–µ–µ(–Ω–µ —Å–æ–≤—Å–µ–º) —Å–µ–ª—Ñ–∏ü§≥':
        photo_path = 'data/me_now.jpeg'
        caption = '–≠—Ç–æ —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–∞—Ä—É –ª–µ—Ç –Ω–∞–∑–∞–¥'
    else:
        photo_path = 'data/me_school.jpg'
        caption = '–ê —ç—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ –≤ —Å–≤–æ–∏ —à–∫–æ–ª—å–Ω—ã–µ –≥–æ–¥—ã'

    with open(photo_path, 'rb') as photo:
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=photo,
                             caption=caption)


async def interest_request_handler(message: types.Message):
    """
    Handler sending user text message about my main hobby
    """

    with open('data/football.jpeg', 'rb') as photo:
        with io.open('data/my_hobby.txt', encoding='utf-8') as caption_file:
            await bot.send_photo(chat_id=message.from_user.id,
                                 photo=photo,
                                 caption=caption_file.read(),
                                 parse_mode='HTML')


async def story_request_handler(message: types.Message):
    """
    Handler moving user to voice stories menu followed with info about this section functionality
    """
    await AllStates.voice_menu.set()

    await bot.send_message(text='–ê –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏,'
                                ' –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.',
                           chat_id=message.from_user.id,
                           reply_markup=story_keyboard,
                           parse_mode='HTML')


async def send_voice_story(message: types.Message):
    """
    Handler sending the story requested by user in format of voice message
    """
    if message.text == '–ú–æ–π —Ä–∞—Å—Å–∫–∞–∑ –æ GPTüß†':
        voice_file = open('data/GPT.m4a', 'rb')
    elif message.text == '–Ø –æ–±—ä—è—Å–Ω—è—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SQL –∏ NoSQLüìö':
        voice_file = open('data/SQL.m4a', 'rb')
    else:
        voice_file = open('data/Lovestory.m4a', 'rb')

    await bot.send_voice(chat_id=message.from_user.id,
                         voice=voice_file)

    voice_file.close()


async def voice_handler(message: types.Message, state: FSMContext):
    msg = await bot.send_message(text='–î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É –ø–æ—Å–ª—É—à–∞—Ç—å, —á—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª..',
                                 chat_id=message.from_user.id,
                                 parse_mode='HTML')

    voice = io.BytesIO()
    await message.voice.download(destination_file=voice)

    transcription = await speech_to_text_pipeline(voice, API_key)

    model_payload = {
        "inputs": {
            "question": transcription['results']['transcript'],
            "context": "–ü—Ä–∏–≤–µ—Ç! "
                       "–£ –º–µ–Ω—è –≤—Å–µ —Å—É–ø–µ—Ä! "
                       "–Ø —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –±–æ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∏ kids ai. "
                       "–ú–µ–Ω—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –°–µ—Ä–≥–µ–µ–≤ –¢–∏–º—É—Ä. "
                       "–¢–∏–º—É—Ä —Å—Ç—É–¥–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å–∞ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–Ω–Ω–æ–ø–æ–ª–∏—Å, —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –ò–ò –∏ –±—ç–∫–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π. "
                       "–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –æ–±—â–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –º–æ–¥–µ–ª–∏ AlexKay/xlm-roberta-large-qa-multilingual-finedtuned-ru."
        },
    }
    while True:
        response = await query(model_payload)
        print(response)
        if 'answer' in response.keys():
            break
    await msg.edit_text(text=response['answer'])


async def back_to_main(message: types.Message):
    await AllStates.main_menu.set()

    await bot.delete_message(message_id=message.message_id,
                             chat_id=message.from_user.id)

    await bot.send_message(text='–¢—ã —Å–Ω–æ–≤–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.',
                           chat_id=message.from_user.id,
                           reply_markup=main_keyboard,
                           parse_mode='HTML')

dp.register_message_handler(start_handler, commands=['start'], state=['*'])
dp.register_message_handler(handle_source, commands=['source'], state=['*'])
dp.register_message_handler(handle_nextstep, commands=['nextstep'], state=['*'])

dp.register_message_handler(back_to_main, text=['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚¨Ö'], state=[AllStates.photo_menu, AllStates.voice_menu, AllStates.wait_message])

dp.register_message_handler(photo_request_handler, text=['–£–≤–∏–¥–µ—Ç—å –º–µ–Ω—èüì∏'], state=[AllStates.main_menu, None])
dp.register_message_handler(send_photo, text=['–°–≤–µ–∂–µ–µ(–Ω–µ —Å–æ–≤—Å–µ–º) —Å–µ–ª—Ñ–∏ü§≥', '–§–æ—Ç–æ –∏–∑ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ãüè´'], state=[AllStates.photo_menu])

dp.register_message_handler(interest_request_handler, text=['–£–∑–Ω–∞—Ç—å –º–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è‚öΩÔ∏è'], state=[AllStates.main_menu, None])
dp.register_message_handler(send_voice_story, text=['–ú–æ–π —Ä–∞—Å—Å–∫–∞–∑ –æ GPTüß†', '–Ø –æ–±—ä—è—Å–Ω—è—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SQL –∏ NoSQLüìö', '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–≤–æ–π –ª—é–±–≤–∏‚ù§Ô∏è'], state=[AllStates.voice_menu])

dp.register_message_handler(story_request_handler, text=['–ü–æ—Å–ª—É—à–∞—Ç—å –º–µ–Ω—èüéß'], state=[AllStates.main_menu, None])

dp.register_message_handler(send_nextstep, content_types=types.ContentTypes.ANY, state=[AllStates.wait_message])

dp.register_message_handler(voice_handler, content_types=types.ContentTypes.VOICE, state=['*'])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
